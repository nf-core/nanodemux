/*
========================================================================================
if (!params.skip_multiqc) {
    process {
        withName: MULTIQC {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { [
                    "${params.outdir}/multiqc",
                    params.skip_alignment? '' : "/${params.aligner}"
                    ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // nanoseq.nf includes
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    // INPUT_CHECK
    withName: 'NFCORE_NANOSEQ:NANOSEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_basecalling) {
    process {
        withName: GUPPY {
            publishDir = [
                path: { "${params.outdir}/guppy" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.skip_basecalling && !params.skip_demultiplexing) {
    process {
        withName: QCAT {
            publishDir = [
                path: { "${params.outdir}/qcat" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.run_nanolyse) {
    process {
        withName: NANOLYSE {
            publishDir = [
                path: { "${params.outdir}/nanolyse" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_qc) {
    if (!params.skip_basecalling) {
        process {
            withName: PYCOQC {
                publishDir = [
                    path: { "${params.outdir}/pycoqc" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
    process {
        withName: NANOPLOT {
            publishDir = [
                path: { "${params.outdir}/nanoplot" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: FASTQC {
            publishDir = [
                path: { "${params.outdir}/fastqc" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

}

if (!params.skip_alignment) {
    process {
        withName: GTF2BED {
            publishDir = [
                path: { "${params.outdir}/genome" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
        withName: GET_CHROM_SIZES {
            publishDir = [
                path: { "${params.outdir}/genome" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
    if (params.aligner == "graphmap2") {
        process {
            withName: GRAPHMAP2_ALIGN {
                publishDir = [
                    path: { "${params.outdir}/graphmap2" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
    if (params.aligner == "minimap2") {
        process {
            withName: MINIMAP2_ALIGN {
                publishDir = [
                    path: { "${params.outdir}/minimap2" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
    if (!params.skip_bigbed) {
        process {
            withName: MINIMAP2_ALIGN {
                publishDir = [
                    path: { "${params.outdir}/minimap2" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
    if (!params.skip_bigwig) {
        process {
            withName: MINIMAP2_ALIGN {
                publishDir = [
                    path: { "${params.outdir}/minimap2" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

}

if (!params.skip_multiqc) {
    process {
        withName: MULTIQC {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { [
                    "${params.outdir}/multiqc",
                    params.skip_alignment? '' : "/${params.aligner}"
                    ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
